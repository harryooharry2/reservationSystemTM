name: Deploy

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  FRONTEND_DIR: './frontend'
  BACKEND_DIR: './backend'

jobs:
  # Pre-deployment checks
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          cd frontend && npm audit --audit-level=moderate || echo "Frontend audit issues found"
          cd ../backend && npm audit --audit-level=moderate || echo "Backend audit issues found"

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ${{ env.FRONTEND_DIR }}/dist
            ${{ env.BACKEND_DIR }}
          retention-days: 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy Frontend to Netlify Staging
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: ${{ env.FRONTEND_DIR }}/dist
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to staging from GitHub Actions'
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_STAGING }}

      - name: Deploy Backend to Render Staging
        run: |
          echo "Deploying backend to Render staging..."
          # Render auto-deploys on push to develop branch
          # This step is for logging and verification

      - name: Wait for deployment
        run: |
          echo "Waiting for deployments to complete..."
          sleep 60

      - name: Run staging health checks
        run: |
          echo "Running staging health checks..."
          # Add staging health checks here
          # curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1
          # curl -f ${{ secrets.STAGING_BACKEND_URL }}/health || exit 1

      - name: Run staging tests
        run: |
          echo "Running staging environment tests..."
          # Add staging-specific tests here

      - name: Notify staging deployment
        run: |
          echo "âœ… Staging deployment completed successfully!"
          echo "Frontend: ${{ secrets.STAGING_FRONTEND_URL }}"
          echo "Backend: ${{ secrets.STAGING_BACKEND_URL }}"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy Frontend to Netlify Production
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: ${{ env.FRONTEND_DIR }}/dist
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to production from GitHub Actions'
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}

      - name: Deploy Backend to Render Production
        run: |
          echo "Deploying backend to Render production..."
          # Render auto-deploys on push to main branch
          # This step is for logging and verification

      - name: Wait for deployment
        run: |
          echo "Waiting for deployments to complete..."
          sleep 120

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add production health checks here
          # curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }} || exit 1
          # curl -f ${{ secrets.PRODUCTION_BACKEND_URL }}/health || exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke tests here

      - name: Notify production deployment
        run: |
          echo "ðŸš€ Production deployment completed successfully!"
          echo "Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}"
          echo "Backend: ${{ secrets.PRODUCTION_BACKEND_URL }}"

      - name: Create deployment tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$(date +%Y%m%d-%H%M%S)" -m "Production deployment"
          git push origin --tags

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Monitor staging deployment
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "Monitoring staging deployment..."
          # Add staging monitoring checks here

      - name: Monitor production deployment
        if: needs.deploy-production.result == 'success'
        run: |
          echo "Monitoring production deployment..."
          # Add production monitoring checks here

      - name: Generate deployment report
        run: |
          echo "## Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Staging Deployment:" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ secrets.STAGING_FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Deployment:" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY

  # Rollback deployment
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get previous deployment
        run: |
          echo "Getting previous deployment..."
          # Add logic to get previous deployment

      - name: Rollback frontend
        run: |
          echo "Rolling back frontend..."
          # Add frontend rollback logic

      - name: Rollback backend
        run: |
          echo "Rolling back backend..."
          # Add backend rollback logic

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          # Add rollback verification

      - name: Notify rollback
        run: |
          echo "ðŸ”„ Rollback completed for ${{ github.event.inputs.environment }}"
